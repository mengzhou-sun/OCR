import  torch.nn as nn
import  torch.nn.functional as F
class GCRNNEncoder(nn.Module):
    def __init__(self, n_channels=3, stride_conv1=2):
        super(GCRNNEncoder, self).__init__()
        self.tanh = nn.Tanh()
        self.sigmoid = nn.Sigmoid()
        self.conv1 = nn.Conv2d(n_channels, 8, (3,3), stride=stride_conv1)
        self.conv2 = nn.Conv2d(8, 16, (2,4))
        self.conv_gate1 = nn.Conv2d(16,16,(3,3))
        self.conv3 = nn.Conv2d(16, 32, (3,3))
        self.conv_gate2 = nn.Conv2d(32,32,(3,3))
        self.conv4 = nn.Conv2d(32, 64, (2,4))
        self.conv_gate3 = nn.Conv2d(64,64,(3,3))
        self.conv5 = nn.Conv2d(64, 128, (3,3))

    def forward(self,x):
        x =self.tanh(self.conv1(x))
        x =self.tanh(self.conv2(x))
        x =self.sigmoid(self.conv_gate1(F.pad(x,(1,1,1,1))))*x
        x=self.tanh(self.conv3(x))
        x =self.sigmoid(self.conv_gate2(F.pad(x,(1,1,1,1))))*x
        x=self.tanh(self.conv4(x))
        x =self.sigmoid(self.conv_gate3(F.pad(x,(1,1,1,1))))*x
        x=self.tanh(self.conv5(x))
        return x
